@startuml

!theme plain
top to bottom direction
skinparam linetype ortho

class AdvisorConfiguration {
  + AdvisorConfiguration(): 
  + questionAnswerAdvisor(VectorStore): QuestionAnswerAdvisor
}
class App {
  + App(): 
  + main(String[]): void
}
class ChatBotService {
  + ChatBotService(): 
  + chat(String): String
  - createPrompt(String, List<Document>): String
}
class ChatbotController {
  + ChatbotController(): 
  + chat(String): Map
  + postChat(Map<String, String>): Map<String, String>
}
class Chunk {
  + Chunk(): 
  - metadata: Map<String, Object>
  - embedding: double[]
  - id: String
  - text: String
   text: String
   embedding: double[]
   id: String
   metadata: Map<String, Object>
}
interface ChunkRepository << interface >>
class ChunkService {
  + ChunkService(): 
  + embededHTML(String): void
  + saveChunk(Chunk): Chunk
}
class DataRetrievalService {
  + DataRetrievalService(): 
  + searchData(String): List<Document>
}
class DotenvConfig {
  + DotenvConfig(): 
  + loadDotenv(): void
}
class HtmlCrawlerService {
  + HtmlCrawlerService(): 
  + crawl(String): HtmlData
}
class HtmlData {
  + HtmlData(String): 
  + HtmlData(String, String): 
  - url: String
  - filteredHtml: String
  - rawHtml: String
   rawHtml: String
   filteredHtml: String
   url: String
}
class HtmlFilterService {
  + HtmlFilterService(): 
  + classifyContent(String): Map<String, Object>
  + classifyAndEnqueueContent(String): void
  + processQueue(): String
}
class HtmlQueueController {
  + HtmlQueueController(): 
  + crawlHtml(Map<String, String>): ResponseEntity<Map<String, Object>>
  + readHtml(Map<String, String>): ResponseEntity<Map<String, Object>>
}
class Node<T> {
  ~ Node(T): 
}
class Queue<T> {
  + Queue(): 
  + enqueue(T): void
  + dequeue(): T
  + size(): int
  + peek(): T
   empty: boolean
}
class QueueConfig {
  + QueueConfig(): 
  + htmlQueue(): BlockingQueue<HtmlData>
}
class QueueService {
  + QueueService(): 
  + resetQueue(): void
  + enqueue(HtmlData): void
  + dequeue(): HtmlData
   empty: boolean
}
class TextController {
  + TextController(): 
  + saveChunk(Chunk): Chunk
  + saveHtml(String): String
}
class VectorDatabase {
  + VectorDatabase(): 
  + generateEmbedding(String): double[]
}
class VectorStoreConfig {
  + VectorStoreConfig(): 
  + vectorStore(MongoTemplate, EmbeddingModel): MongoDBAtlasVectorStore
  + embeddingModel(): EmbeddingModel
}
class WikiDocument {
  + WikiDocument(): 
  - filePath: String
  - content: String
   filePath: String
   content: String
}

Node                  +-[#820000,plain]-  Queue                
@enduml
